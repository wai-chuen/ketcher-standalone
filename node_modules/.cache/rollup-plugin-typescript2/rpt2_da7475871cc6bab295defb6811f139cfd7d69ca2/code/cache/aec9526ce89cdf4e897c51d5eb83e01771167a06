{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Command, WorkerEvent, SupportedFormat } from './indigoWorker.types';\r\nimport { ChemicalMimeType } from 'ketcher-core';\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\nimport IndigoWorker from 'web-worker:./indigoWorker';\r\nimport EventEmitter from 'events';\r\nfunction convertMimeTypeToOutputFormat(mimeType) {\r\n    let format;\r\n    switch (mimeType) {\r\n        case ChemicalMimeType.Mol: {\r\n            format = SupportedFormat.Mol;\r\n            break;\r\n        }\r\n        case ChemicalMimeType.Rxn: {\r\n            format = SupportedFormat.Rxn;\r\n            break;\r\n        }\r\n        case ChemicalMimeType.DaylightSmiles:\r\n        case ChemicalMimeType.ExtendedSmiles: {\r\n            format = SupportedFormat.Smiles;\r\n            break;\r\n        }\r\n        case ChemicalMimeType.DaylightSmarts: {\r\n            format = SupportedFormat.Smarts;\r\n            break;\r\n        }\r\n        case ChemicalMimeType.InChI: {\r\n            format = SupportedFormat.InChI;\r\n            break;\r\n        }\r\n        case ChemicalMimeType.InChIAuxInfo: {\r\n            format = SupportedFormat.InChIAuxInfo;\r\n            break;\r\n        }\r\n        case ChemicalMimeType.CML: {\r\n            format = SupportedFormat.CML;\r\n            break;\r\n        }\r\n        case ChemicalMimeType.KET: {\r\n            format = SupportedFormat.Ket;\r\n            break;\r\n        }\r\n        case ChemicalMimeType.CDXML: {\r\n            format = SupportedFormat.CDXML;\r\n            break;\r\n        }\r\n        case ChemicalMimeType.CDX: {\r\n            format = SupportedFormat.CDX;\r\n            break;\r\n        }\r\n        case ChemicalMimeType.UNKNOWN:\r\n        default: {\r\n            throw new Error('Unsupported chemical mime type');\r\n        }\r\n    }\r\n    return format;\r\n}\r\nfunction mapCalculatedPropertyName(property) {\r\n    let mappedProperty;\r\n    switch (property) {\r\n        case 'gross-formula': {\r\n            mappedProperty = 'gross';\r\n            break;\r\n        }\r\n        default:\r\n            mappedProperty = property;\r\n            break;\r\n    }\r\n    return mappedProperty;\r\n}\r\nfunction mapWarningGroup(property) {\r\n    let mappedProperty;\r\n    switch (property) {\r\n        case 'OVERLAP_BOND': {\r\n            mappedProperty = 'overlapping_bonds';\r\n            break;\r\n        }\r\n        default:\r\n            mappedProperty = property.toLowerCase();\r\n            break;\r\n    }\r\n    return mappedProperty;\r\n}\r\nconst messageTypeToEventMapping = {\r\n    [Command.Info]: WorkerEvent.Info,\r\n    [Command.Convert]: WorkerEvent.Convert,\r\n    [Command.Layout]: WorkerEvent.Layout,\r\n    [Command.Clean]: WorkerEvent.Clean,\r\n    [Command.Aromatize]: WorkerEvent.Aromatize,\r\n    [Command.Dearomatize]: WorkerEvent.Dearomatize,\r\n    [Command.CalculateCip]: WorkerEvent.CalculateCip,\r\n    [Command.Automap]: WorkerEvent.Automap,\r\n    [Command.Check]: WorkerEvent.Check,\r\n    [Command.Calculate]: WorkerEvent.Calculate,\r\n    [Command.GenerateImageAsBase64]: WorkerEvent.GenerateImageAsBase64,\r\n    [Command.GenerateInchIKey]: WorkerEvent.GenerateInchIKey\r\n};\r\nclass IndigoService {\r\n    defaultOptions;\r\n    worker;\r\n    EE = new EventEmitter();\r\n    constructor(defaultOptions) {\r\n        this.defaultOptions = defaultOptions;\r\n        this.worker = new IndigoWorker();\r\n        this.worker.onmessage = (e) => {\r\n            const message = e.data;\r\n            if (message.type !== undefined) {\r\n                const event = messageTypeToEventMapping[message.type];\r\n                this.EE.emit(event, { data: message });\r\n            }\r\n        };\r\n    }\r\n    async generateInchIKey(struct) {\r\n        return new Promise((resolve, reject) => {\r\n            const action = ({ data }) => {\r\n                const msg = data;\r\n                if (!msg.hasError) {\r\n                    resolve(msg.payload || '');\r\n                }\r\n                else {\r\n                    reject(msg.error);\r\n                }\r\n            };\r\n            const inputMessage = {\r\n                type: Command.GenerateInchIKey,\r\n                data: { struct }\r\n            };\r\n            this.EE.removeListener(WorkerEvent.GenerateInchIKey, action);\r\n            this.EE.addListener(WorkerEvent.GenerateInchIKey, action);\r\n            this.worker.postMessage(inputMessage);\r\n        });\r\n    }\r\n    info() {\r\n        return new Promise((resolve, reject) => {\r\n            const action = ({ data }) => {\r\n                console.log('info action', data);\r\n                const msg = data;\r\n                if (!msg.hasError) {\r\n                    const result = {\r\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                        indigoVersion: msg.payload,\r\n                        imagoVersions: [],\r\n                        isAvailable: true\r\n                    };\r\n                    resolve(result);\r\n                }\r\n                else {\r\n                    reject(msg.error);\r\n                }\r\n            };\r\n            this.EE.removeListener(WorkerEvent.Info, action);\r\n            this.EE.addListener(WorkerEvent.Info, action);\r\n            this.worker.postMessage({ type: Command.Info });\r\n        });\r\n    }\r\n    convert(data, options) {\r\n        const { output_format, struct } = data;\r\n        const format = convertMimeTypeToOutputFormat(output_format);\r\n        return new Promise((resolve, reject) => {\r\n            const action = ({ data }) => {\r\n                console.log('convert action', data);\r\n                const msg = data;\r\n                if (!msg.hasError) {\r\n                    const result = {\r\n                        struct: msg.payload,\r\n                        format: output_format\r\n                    };\r\n                    resolve(result);\r\n                }\r\n                else {\r\n                    reject(msg.error);\r\n                }\r\n            };\r\n            const commandOptions = {\r\n                ...this.defaultOptions,\r\n                ...options\r\n            };\r\n            const commandData = {\r\n                struct,\r\n                format,\r\n                options: commandOptions\r\n            };\r\n            const inputMessage = {\r\n                type: Command.Convert,\r\n                data: commandData\r\n            };\r\n            this.EE.removeListener(WorkerEvent.Convert, action);\r\n            this.EE.addListener(WorkerEvent.Convert, action);\r\n            this.worker.postMessage(inputMessage);\r\n        });\r\n    }\r\n    layout(data, options) {\r\n        const { struct, output_format } = data;\r\n        const format = convertMimeTypeToOutputFormat(output_format);\r\n        return new Promise((resolve, reject) => {\r\n            const action = ({ data }) => {\r\n                console.log('layout action', data);\r\n                const msg = data;\r\n                if (!msg.hasError) {\r\n                    const result = {\r\n                        struct: msg.payload,\r\n                        format: ChemicalMimeType.Mol\r\n                    };\r\n                    resolve(result);\r\n                }\r\n                else {\r\n                    reject(msg.error);\r\n                }\r\n            };\r\n            const commandOptions = {\r\n                ...this.defaultOptions,\r\n                ...options\r\n            };\r\n            const commandData = {\r\n                struct,\r\n                format,\r\n                options: commandOptions\r\n            };\r\n            const inputMessage = {\r\n                type: Command.Layout,\r\n                data: commandData\r\n            };\r\n            this.EE.removeListener(WorkerEvent.Layout, action);\r\n            this.EE.addListener(WorkerEvent.Layout, action);\r\n            this.worker.postMessage(inputMessage);\r\n        });\r\n    }\r\n    clean(data, options) {\r\n        const { struct, selected, output_format } = data;\r\n        const format = convertMimeTypeToOutputFormat(output_format);\r\n        return new Promise((resolve, reject) => {\r\n            const action = ({ data }) => {\r\n                const msg = data;\r\n                if (!msg.hasError) {\r\n                    const result = {\r\n                        struct: msg.payload,\r\n                        format: ChemicalMimeType.Mol\r\n                    };\r\n                    resolve(result);\r\n                }\r\n                else {\r\n                    reject(msg.error);\r\n                }\r\n            };\r\n            const commandOptions = {\r\n                ...this.defaultOptions,\r\n                ...options\r\n            };\r\n            const commandData = {\r\n                struct,\r\n                format,\r\n                options: commandOptions,\r\n                selectedAtoms: selected || []\r\n            };\r\n            const inputMessage = {\r\n                type: Command.Clean,\r\n                data: commandData\r\n            };\r\n            this.EE.removeListener(WorkerEvent.Clean, action);\r\n            this.EE.addListener(WorkerEvent.Clean, action);\r\n            this.worker.postMessage(inputMessage);\r\n        });\r\n    }\r\n    aromatize(data, options) {\r\n        const { struct, output_format } = data;\r\n        const format = convertMimeTypeToOutputFormat(output_format);\r\n        return new Promise((resolve, reject) => {\r\n            const action = ({ data }) => {\r\n                const msg = data;\r\n                if (!msg.hasError) {\r\n                    const result = {\r\n                        struct: msg.payload,\r\n                        format: ChemicalMimeType.Mol\r\n                    };\r\n                    resolve(result);\r\n                }\r\n                else {\r\n                    reject(msg.error);\r\n                }\r\n            };\r\n            const commandOptions = {\r\n                ...this.defaultOptions,\r\n                ...options\r\n            };\r\n            const commandData = {\r\n                struct,\r\n                format,\r\n                options: commandOptions\r\n            };\r\n            const inputMessage = {\r\n                type: Command.Aromatize,\r\n                data: commandData\r\n            };\r\n            this.EE.removeListener(WorkerEvent.Aromatize, action);\r\n            this.EE.addListener(WorkerEvent.Aromatize, action);\r\n            this.worker.postMessage(inputMessage);\r\n        });\r\n    }\r\n    dearomatize(data, options) {\r\n        const { struct, output_format } = data;\r\n        const format = convertMimeTypeToOutputFormat(output_format);\r\n        return new Promise((resolve, reject) => {\r\n            const action = ({ data }) => {\r\n                const msg = data;\r\n                if (!msg.hasError) {\r\n                    const result = {\r\n                        struct: msg.payload,\r\n                        format: ChemicalMimeType.Mol\r\n                    };\r\n                    resolve(result);\r\n                }\r\n                else {\r\n                    reject(msg.error);\r\n                }\r\n            };\r\n            const commandOptions = {\r\n                ...this.defaultOptions,\r\n                ...options\r\n            };\r\n            const commandData = {\r\n                struct,\r\n                format,\r\n                options: commandOptions\r\n            };\r\n            const inputMessage = {\r\n                type: Command.Dearomatize,\r\n                data: commandData\r\n            };\r\n            this.EE.removeListener(WorkerEvent.Dearomatize, action);\r\n            this.EE.addListener(WorkerEvent.Dearomatize, action);\r\n            this.worker.postMessage(inputMessage);\r\n        });\r\n    }\r\n    calculateCip(data, options) {\r\n        const { struct, output_format } = data;\r\n        const format = convertMimeTypeToOutputFormat(output_format);\r\n        return new Promise((resolve, reject) => {\r\n            const action = ({ data }) => {\r\n                const msg = data;\r\n                if (!msg.hasError) {\r\n                    const result = {\r\n                        struct: msg.payload,\r\n                        format: ChemicalMimeType.Mol\r\n                    };\r\n                    resolve(result);\r\n                }\r\n                else {\r\n                    reject(msg.error);\r\n                }\r\n            };\r\n            const commandOptions = {\r\n                ...this.defaultOptions,\r\n                ...options\r\n            };\r\n            const commandData = {\r\n                struct,\r\n                format,\r\n                options: commandOptions\r\n            };\r\n            const inputMessage = {\r\n                type: Command.CalculateCip,\r\n                data: commandData\r\n            };\r\n            this.EE.removeListener(WorkerEvent.CalculateCip, action);\r\n            this.EE.addListener(WorkerEvent.CalculateCip, action);\r\n            this.worker.postMessage(inputMessage);\r\n        });\r\n    }\r\n    automap(data, options) {\r\n        const { mode, struct, output_format } = data;\r\n        const format = convertMimeTypeToOutputFormat(output_format);\r\n        return new Promise((resolve, reject) => {\r\n            const action = ({ data }) => {\r\n                const msg = data;\r\n                if (!msg.hasError) {\r\n                    const result = {\r\n                        struct: msg.payload,\r\n                        format: ChemicalMimeType.Mol\r\n                    };\r\n                    resolve(result);\r\n                }\r\n                else {\r\n                    reject(msg.error);\r\n                }\r\n            };\r\n            const commandOptions = {\r\n                ...this.defaultOptions,\r\n                ...options\r\n            };\r\n            const commandData = {\r\n                struct,\r\n                format,\r\n                mode,\r\n                options: commandOptions\r\n            };\r\n            const inputMessage = {\r\n                type: Command.Automap,\r\n                data: commandData\r\n            };\r\n            this.EE.removeListener(WorkerEvent.Automap, action);\r\n            this.EE.addListener(WorkerEvent.Automap, action);\r\n            this.worker.postMessage(inputMessage);\r\n        });\r\n    }\r\n    check(data, options) {\r\n        const { types, struct } = data;\r\n        return new Promise((resolve, reject) => {\r\n            const action = ({ data }) => {\r\n                const msg = data;\r\n                if (!msg.hasError) {\r\n                    const warnings = JSON.parse(msg.payload);\r\n                    const result = Object.entries(warnings).reduce((acc, curr) => {\r\n                        const [key, value] = curr;\r\n                        const mappedPropertyName = mapWarningGroup(key);\r\n                        acc[mappedPropertyName] = value;\r\n                        return acc;\r\n                    }, {});\r\n                    resolve(result);\r\n                }\r\n                else {\r\n                    reject(msg.error);\r\n                }\r\n            };\r\n            const commandOptions = {\r\n                ...this.defaultOptions,\r\n                ...options\r\n            };\r\n            const commandData = {\r\n                struct,\r\n                types,\r\n                options: commandOptions\r\n            };\r\n            const inputMessage = {\r\n                type: Command.Check,\r\n                data: commandData\r\n            };\r\n            this.EE.removeListener(WorkerEvent.Check, action);\r\n            this.EE.addListener(WorkerEvent.Check, action);\r\n            this.worker.postMessage(inputMessage);\r\n        });\r\n    }\r\n    calculate(data, options) {\r\n        const { properties, struct, selected } = data;\r\n        return new Promise((resolve, reject) => {\r\n            const action = ({ data }) => {\r\n                const msg = data;\r\n                if (!msg.hasError) {\r\n                    const calculatedProperties = JSON.parse(msg.payload);\r\n                    const result = Object.entries(calculatedProperties).reduce((acc, curr) => {\r\n                        const [key, value] = curr;\r\n                        const mappedPropertyName = mapCalculatedPropertyName(key);\r\n                        if (properties.includes(mappedPropertyName)) {\r\n                            acc[mappedPropertyName] = value;\r\n                        }\r\n                        return acc;\r\n                    }, {});\r\n                    resolve(result);\r\n                }\r\n                else {\r\n                    reject(msg.error);\r\n                }\r\n            };\r\n            const commandOptions = {\r\n                ...this.defaultOptions,\r\n                ...options\r\n            };\r\n            const commandData = {\r\n                struct,\r\n                properties,\r\n                options: commandOptions,\r\n                selectedAtoms: selected || []\r\n            };\r\n            const inputMessage = {\r\n                type: Command.Calculate,\r\n                data: commandData\r\n            };\r\n            this.EE.removeListener(WorkerEvent.Calculate, action);\r\n            this.EE.addListener(WorkerEvent.Calculate, action);\r\n            this.worker.postMessage(inputMessage);\r\n        });\r\n    }\r\n    recognize(_blob, _version) {\r\n        return Promise.reject(new Error('Not supported in standalone mode'));\r\n    }\r\n    generateImageAsBase64(data, options = { outputFormat: 'png', backgroundColor: '' }) {\r\n        const { outputFormat, backgroundColor, ...restOptions } = options;\r\n        return new Promise((resolve, reject) => {\r\n            const action = ({ data }) => {\r\n                const msg = data;\r\n                if (!msg.hasError) {\r\n                    resolve(msg.payload);\r\n                }\r\n                else {\r\n                    reject(msg.error);\r\n                }\r\n            };\r\n            const commandOptions = {\r\n                ...this.defaultOptions,\r\n                ...restOptions\r\n            };\r\n            const commandData = {\r\n                struct: data,\r\n                outputFormat: outputFormat || 'png',\r\n                backgroundColor: backgroundColor,\r\n                options: commandOptions\r\n            };\r\n            const inputMessage = {\r\n                type: Command.GenerateImageAsBase64,\r\n                data: commandData\r\n            };\r\n            this.EE.removeListener(WorkerEvent.GenerateImageAsBase64, action);\r\n            this.EE.addListener(WorkerEvent.GenerateImageAsBase64, action);\r\n            this.worker.postMessage(inputMessage);\r\n        });\r\n    }\r\n}\r\nexport default IndigoService;\r\n//# sourceMappingURL=standaloneStructService.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-standalone/src/infrastructure/services/struct/indigoWorker.types.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/dist/index.d.ts","/usr/local/google/home/waich/workspace/ketcher/node_modules/events/events.js"],"map":"{\"version\":3,\"file\":\"standaloneStructService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/infrastructure/services/struct/standaloneStructService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-standalone/node_modules/.cache/rollup-plugin-typescript2/placeholder/infrastructure/services/struct/standaloneStructService.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { AromatizeData, AromatizeResult, AutomapData, AutomapResult, CalculateCipData, CalculateCipResult, CalculateData, CalculateResult, CheckData, CheckResult, CleanData, CleanResult, ConvertData, ConvertResult, DearomatizeData, DearomatizeResult, GenerateImageOptions, InfoResult, LayoutData, LayoutResult, RecognizeResult, StructService, StructServiceOptions } from 'ketcher-core';\r\ndeclare class IndigoService implements StructService {\r\n    private readonly defaultOptions;\r\n    private readonly worker;\r\n    private readonly EE;\r\n    constructor(defaultOptions: StructServiceOptions);\r\n    generateInchIKey(struct: string): Promise<string>;\r\n    info(): Promise<InfoResult>;\r\n    convert(data: ConvertData, options?: StructServiceOptions): Promise<ConvertResult>;\r\n    layout(data: LayoutData, options?: StructServiceOptions): Promise<LayoutResult>;\r\n    clean(data: CleanData, options?: StructServiceOptions): Promise<CleanResult>;\r\n    aromatize(data: AromatizeData, options?: StructServiceOptions): Promise<AromatizeResult>;\r\n    dearomatize(data: DearomatizeData, options?: StructServiceOptions): Promise<DearomatizeResult>;\r\n    calculateCip(data: CalculateCipData, options?: StructServiceOptions): Promise<CalculateCipResult>;\r\n    automap(data: AutomapData, options?: StructServiceOptions): Promise<AutomapResult>;\r\n    check(data: CheckData, options?: StructServiceOptions): Promise<CheckResult>;\r\n    calculate(data: CalculateData, options?: StructServiceOptions): Promise<CalculateResult>;\r\n    recognize(_blob: Blob, _version: string): Promise<RecognizeResult>;\r\n    generateImageAsBase64(data: string, options?: GenerateImageOptions): Promise<string>;\r\n}\r\nexport default IndigoService;\r\n"}}
